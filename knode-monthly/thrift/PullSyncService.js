//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./pullsync_types');
//HELPER FUNCTIONS AND STRUCTURES

PullSyncService_pullData_args = function(args) {
  this.timeline = null;
  this.lastup = null;
  this.appname = null;
  this.type = null;
  this.s1 = null;
  this.s2 = null;
  this.isim = null;
  this.tagid = null;
  if (args) {
    if (args.timeline !== undefined) {
      this.timeline = args.timeline;
    }
    if (args.lastup !== undefined) {
      this.lastup = args.lastup;
    }
    if (args.appname !== undefined) {
      this.appname = args.appname;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.s1 !== undefined) {
      this.s1 = args.s1;
    }
    if (args.s2 !== undefined) {
      this.s2 = args.s2;
    }
    if (args.isim !== undefined) {
      this.isim = args.isim;
    }
    if (args.tagid !== undefined) {
      this.tagid = args.tagid;
    }
  }
};
PullSyncService_pullData_args.prototype = {};
PullSyncService_pullData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeline = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastup = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.s1 = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.s2 = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.isim = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.tagid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PullSyncService_pullData_args.prototype.write = function(output) {
  output.writeStructBegin('PullSyncService_pullData_args');
  if (this.timeline !== null && this.timeline !== undefined) {
    output.writeFieldBegin('timeline', Thrift.Type.I64, 1);
    output.writeI64(this.timeline);
    output.writeFieldEnd();
  }
  if (this.lastup !== null && this.lastup !== undefined) {
    output.writeFieldBegin('lastup', Thrift.Type.I64, 2);
    output.writeI64(this.lastup);
    output.writeFieldEnd();
  }
  if (this.appname !== null && this.appname !== undefined) {
    output.writeFieldBegin('appname', Thrift.Type.STRING, 3);
    output.writeString(this.appname);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.s1 !== null && this.s1 !== undefined) {
    output.writeFieldBegin('s1', Thrift.Type.BYTE, 5);
    output.writeByte(this.s1);
    output.writeFieldEnd();
  }
  if (this.s2 !== null && this.s2 !== undefined) {
    output.writeFieldBegin('s2', Thrift.Type.BYTE, 6);
    output.writeByte(this.s2);
    output.writeFieldEnd();
  }
  if (this.isim !== null && this.isim !== undefined) {
    output.writeFieldBegin('isim', Thrift.Type.I32, 7);
    output.writeI32(this.isim);
    output.writeFieldEnd();
  }
  if (this.tagid !== null && this.tagid !== undefined) {
    output.writeFieldBegin('tagid', Thrift.Type.STRING, 8);
    output.writeString(this.tagid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PullSyncService_pullData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PullSyncService_pullData_result.prototype = {};
PullSyncService_pullData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PullSyncService_pullData_result.prototype.write = function(output) {
  output.writeStructBegin('PullSyncService_pullData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PullSyncService_ping_args = function(args) {
};
PullSyncService_ping_args.prototype = {};
PullSyncService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PullSyncService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('PullSyncService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PullSyncService_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PullSyncService_ping_result.prototype = {};
PullSyncService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PullSyncService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('PullSyncService_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PullSyncServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PullSyncServiceClient.prototype = {};
PullSyncServiceClient.prototype.seqid = function() { return this._seqid; }
PullSyncServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
PullSyncServiceClient.prototype.pullData = function(timeline, lastup, appname, type, s1, s2, isim, tagid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pullData(timeline, lastup, appname, type, s1, s2, isim, tagid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pullData(timeline, lastup, appname, type, s1, s2, isim, tagid);
  }
};

PullSyncServiceClient.prototype.send_pullData = function(timeline, lastup, appname, type, s1, s2, isim, tagid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pullData', Thrift.MessageType.CALL, this.seqid());
  var args = new PullSyncService_pullData_args();
  args.timeline = timeline;
  args.lastup = lastup;
  args.appname = appname;
  args.type = type;
  args.s1 = s1;
  args.s2 = s2;
  args.isim = isim;
  args.tagid = tagid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PullSyncServiceClient.prototype.recv_pullData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PullSyncService_pullData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pullData failed: unknown result');
};
PullSyncServiceClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

PullSyncServiceClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new PullSyncService_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PullSyncServiceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PullSyncService_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};
PullSyncServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PullSyncServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PullSyncServiceProcessor.prototype.process_pullData = function(seqid, input, output) {
  var args = new PullSyncService_pullData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pullData.length === 8) {
    Q.fcall(this._handler.pullData, args.timeline, args.lastup, args.appname, args.type, args.s1, args.s2, args.isim, args.tagid)
      .then(function(result) {
        var result = new PullSyncService_pullData_result({success: result});
        output.writeMessageBegin("pullData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PullSyncService_pullData_result(err);
        output.writeMessageBegin("pullData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pullData(args.timeline, args.lastup, args.appname, args.type, args.s1, args.s2, args.isim, args.tagid,  function (err, result) {
      var result = new PullSyncService_pullData_result((err != null ? err : {success: result}));
      output.writeMessageBegin("pullData", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PullSyncServiceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new PullSyncService_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new PullSyncService_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PullSyncService_ping_result(err);
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping( function (err, result) {
      var result = new PullSyncService_ping_result((err != null ? err : {success: result}));
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

